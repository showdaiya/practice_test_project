openapi: 3.0.3
info:
  title: FreshCart API
  version: "1.0"
servers:
  - url: https://api.example.com
paths:
  /checkout/confirm:
    post:
      summary: Confirm order
      parameters:
        - in: header
          name: Idempotency-Key
          required: true
          schema: { type: string, minLength: 8 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cartId: { type: string }
                paymentMethod: { type: string, enum: [card] }
                couponCode: { type: string, nullable: true }
                slotReservationId: { type: string }
              required: [cartId, paymentMethod, slotReservationId]
      responses:
        "200":
          description: confirmed
          headers:
            X-Order-Id: { schema: { type: string } }
            X-Idempotent-Result: { schema: { type: string, enum: [fresh, replay] } }
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, enum: [confirmed] }
                  orderId: { type: string }
        "202":
          description: auth pending (3DS)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, enum: [auth_pending] }
                  redirectUrl: { type: string }
        "4XX":
          description: business error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "5XX":
          description: server error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
  /slots/reserve:
    post:
      summary: Reserve a delivery slot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                slotId: { type: string }
                cartId: { type: string }
              required: [slotId, cartId]
      responses:
        "200":
          description: reserved
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservationId: { type: string }
                  ttlSeconds: { type: integer }
        "409":
          description: conflict
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
components:
  schemas:
    Error:
      type: object
      properties:
        code: { type: string }
        message: { type: string }
        details:
          type: object
          additionalProperties: true

